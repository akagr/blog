<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://akagr.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://akagr.github.io/" rel="alternate" type="text/html" /><updated>2021-01-30T06:51:57-06:00</updated><id>https://akagr.github.io/feed.xml</id><title type="html">Akash Agrawal</title><subtitle>Lessons and ramblings. Thoughts and speculations. Opinions are my own.</subtitle><entry><title type="html">Cleaning merged Git branches</title><link href="https://akagr.github.io/2017/10/03/cleaning-git-branches.html" rel="alternate" type="text/html" title="Cleaning merged Git branches" /><published>2017-10-03T00:00:00-05:00</published><updated>2017-10-03T00:00:00-05:00</updated><id>https://akagr.github.io/2017/10/03/cleaning-git-branches</id><author><name></name></author><summary type="html">Doing some git house cleaning is something that gets neglected more often than not. With zero-cost branches in git (unlike svn), most developers creates zillions of branches during the course of their projects. Most git workflows see creation of every unit of work being put under its own branch. This means individual branches for features, bug fixes, hot fixes etc.</summary></entry><entry><title type="html">Accessing child elements in Angular / Ionic</title><link href="https://akagr.github.io/2017/10/03/childelements-in-angular.html" rel="alternate" type="text/html" title="Accessing child elements in Angular / Ionic" /><published>2017-10-03T00:00:00-05:00</published><updated>2017-10-03T00:00:00-05:00</updated><id>https://akagr.github.io/2017/10/03/childelements-in-angular</id><author><name></name></author><summary type="html">Components are at the heart of Angular, and we have some very useful tools to work with them efficiently. Often, we need to access the children - child elements, in other words - of our components. This can mean getting a reference to the DOM element, or to the actual component object if one exists. For this, we have at our disposal two handy decorators @ViewChild and @ContentChild, along with their list counterparts - @ViewChildren and @ContentChildren. Let’s see why there are two of these and how we can use them.</summary></entry><entry><title type="html">Beginner’s guide to Megaparsec</title><link href="https://akagr.github.io/2017/01/19/beginners-guide-to-megaparsec.html" rel="alternate" type="text/html" title="Beginner’s guide to Megaparsec" /><published>2017-01-19T00:00:00-06:00</published><updated>2017-01-19T00:00:00-06:00</updated><id>https://akagr.github.io/2017/01/19/beginners-guide-to-megaparsec</id><author><name></name></author><summary type="html">What is Megaparsec?</summary></entry><entry><title type="html">Haskell Diary 2 - Algebra of Data Types</title><link href="https://akagr.github.io/2016/04/10/haskell-diary-2-algebraic-data-types.html" rel="alternate" type="text/html" title="Haskell Diary 2 - Algebra of Data Types" /><published>2016-04-10T00:00:00-05:00</published><updated>2016-04-10T00:00:00-05:00</updated><id>https://akagr.github.io/2016/04/10/haskell-diary-2-algebraic-data-types</id><author><name></name></author><summary type="html">In every single Haskell guide I’ve been through, the term Algebraic Data Types is mentioned at least once. In most cases, the text simply moved on to how types are defined and used. A small minority actually tries to explain why Haskell’s data types are called Algebraic. An even smaller minority succeeded in getting the point across. Here’s me documenting what I’ve learned so far about them. Hopefully it’d be of some help for future Haskell learners.</summary></entry><entry><title type="html">What Promises Do That Observables Can’t</title><link href="https://akagr.github.io/2016/04/06/what-promises-do-that-observables-cant.html" rel="alternate" type="text/html" title="What Promises Do That Observables Can’t" /><published>2016-04-06T00:00:00-05:00</published><updated>2016-04-06T00:00:00-05:00</updated><id>https://akagr.github.io/2016/04/06/what-promises-do-that-observables-cant</id><author><name></name></author><summary type="html">Note: This is a cross-post of an article I authored. The original was published at Modus Create, Inc. on April 06, 2016.</summary></entry></feed>